#!/bin/bash

IDE_PATH="/Applications/Arduino.app"
# IDE_PATH="/Volumes/Storage HD/Applications/Arduino2.app"
SERIAL="/dev/tty.*usbserial*"
DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"
CONFIG="$DIR/.cli-config.yml"
PROJECT=""
BOARD="arduino:avr:uno"
ARD15="~/Library/Arduino15"
BOSSAC="$ARD15/packages/arduino/tools/bossac/1.7.0/bossac"
BUILD_RES=""
SEQUENTIAL=false
RETRY=false
CACHE=false
USE_CLI=false

################# Generate ID ##################
epoch=$(date +%s)
build_path="/tmp/multi-build-$epoch"
mkdir "$build_path"

if [ ! -e "$CONFIG" ]; then
    echo -e "board_manager:\n   additional_urls:\n    - \"https://adafruit.github.io/arduino-board-index/package_adafruit_index.json\"" >"$CONFIG"
fi

trap "trap - SIGTERM && kill -- -$$" SIGINT SIGTERM EXIT
trap "exit" INT TERM
trap "kill 0" EXIT

############### Define functions ###############
help_txt(){
echo -e "
Multi-Upload (multi-upload).

Usage:
   multi-upload [flags...]

Available Flags:
   Project          -p <path>     Path to project folder.
   IDE location     -i <path>     Path to Arduino IDE (.app).
   Device RegEx     -d <regex>    RegEx string to select upload devices. (IE: /dev/cu*usb*)
   Board Identifier -b <ident>    Board type identifier. (IE: arduino:avr:uno)
   Manager URL add  -j <URL>      Adds <URL> to the board manager JSON list.
   Sequential mode  -s            Uploads sequentially instead of in parallel.
   Retry enable     -r            Enables single retry upon upload failures.
   Cache enable     -c            Enables caching compile files.
   Arduino-CLI      -l            Use arduino-cli to compile and upload.
   Help dialog      -h            Display help and exit.
"
}


# Upload in parallel (Print to file)
upload(){
    if [ "$USE_CLI" = false ]; then
        if [ "$CACHE" = false ]; then
            "$IDE_PATH/Contents/MacOS/Arduino" --board "$1" --port $3 --upload "$2" 2> /tmp/multi-upload-out-$4
        else
            "$IDE_PATH/Contents/MacOS/Arduino" --board "$1" --port $3 --pref "build.path=$build_path" --upload "$2" 2> /tmp/multi-upload-out-$4
        fi
    else
        if [[ "$1" == *"samd"* ]]; then
            echo "Detected SAMD"
            echo "Sending bootloader wakeup"
            stty -f "$3" 1200 2> /dev/null
            sleep 1
            if [ ${PIPESTATUS[0]} -ne 0 ]; then
                echo "Failed to touch serial port! ($3)"
                exit 1
            fi
            eval $BOSSAC -i -d --port="\"$3\"" -U true -i -e -w -v "\"$BUILD_RES\"" -R
        else
            arduino-cli upload -p "$3" --fqbn "$1" "$2" 2> /tmp/multi-upload-out-$4
        fi
    fi
    if [ $? -ne 0 ]; then
        if [ "$RETRY" = true ]; then
            if [ "$5" = true ]; then
                upload "$1" "$2" "$3" "$4" false
            else
                exit 1
            fi
        else
            exit 1
        fi
    else
        exit 0
    fi
}

# Upload sequentially (Print to console)
upload_nofile(){
    echo "UPLOAD NF"
    if [ "$USE_CLI" = false ]; then
        if [ "$CACHE" = false ]; then
            "$IDE_PATH/Contents/MacOS/Arduino" --board "$1" --port $2 --upload "$3"
            exit $?
        else
            "$IDE_PATH/Contents/MacOS/Arduino" --board "$1" --port $2 --pref "build.path=$build_path" --upload "$3"
            exit $?
        fi
    else
        if [[ "$1" == *"samd"* ]]; then
            echo "Detected SAMD"
            echo "Sending bootloader wakeup"
            stty -f "$2" 1200
            sleep 1
            if [ ${PIPESTATUS[0]} -ne 0 ]; then
                echo "Failed to touch serial port! ($2)"
                exit 1
            fi
            eval $BOSSAC -i -d --port="\"$2\"" -U true -i -e -w -v "\"$BUILD_RES\"" -R
            exit $?
        else
            arduino-cli upload -p "$2" --fqbn "$1" "$3" --config-file "$CONFIG" --debug
        fi
        exit $?
    fi
}


################# Check Inputs #################

while getopts ":srhclb:p:i:d:j:" opt; do
  case ${opt} in
    s )
      SEQUENTIAL=true
      ;;
    r )
      RETRY=true
      ;;
    h )
      help_txt
      exit
      ;;
    c )
      CACHE=true
      ;;
    l )
      command -v arduino-cli >/dev/null 2>&1 || { echo >&2 "Invalid option: -l: The arduino-cli is not installed. Install here (https://github.com/arduino/arduino-cli)"; exit 1; }
      USE_CLI=true
      ;;
    b )
      BOARD=$OPTARG
      ;;
    p )
      PROJECT=$OPTARG
      ;;
    i )
      IDE_PATH=$OPTARG
      ;;
    d )
      SERIAL=$OPTARG
      ;;
    j )
      echo "Adding board url '$OPTARG' to '$CONFIG'"
      echo -e "    - \"$OPTARG\"" >> "$CONFIG"
      exit 0
      ;;
    \? )
      echo "Invalid option: $OPTARG" 1>&2
      help_txt
      exit 1
      ;;
    : )
      echo "Invalid option: $OPTARG requires an argument" 1>&2
      help_txt
      exit 1
      ;;
  esac
done
shift $((OPTIND -1))

if [ -z "$PROJECT" ]; then
    echo "Please designate project with the '-p' selector." 1>&2
    help_txt
    exit 1
fi

if [ "$USE_CLI" = false ]; then
    IFS='/' read -ra A_PATH <<< "${PROJECT%/}"
    printf -v PROJECT '%s/%s.ino' "${PROJECT%/}" "${A_PATH[${#A_PATH[@]}-1]}"
else
    CACHE=true
fi

# if ! [ -f "$PROJECT" ]; then
#     echo "Project file not found: " $PROJECT 1>&2
#     exit 1
# fi

IFS=':' read -ra ADDR <<< "$BOARD"
printf -v CORE '%s:%s' "${ADDR[0]}" "${ADDR[1]}"

# if [ -z "$1" ]
#   then
#     help_txt
#     exit 1
# fi

# if [ -z "$2" ]
#   then
#     help_txt
#     exit 1
# fi

################# Main Program #################

echo -e "\033[0;36m  __  __        _  _    _       _   _        _                _ 
 |  \/  | _  _ | || |_ (_) ___ | | | | _ __ | | ___  __ _  __| |
 | |\/| || || || ||  _|| ||___|| |_| || '_ \| |/ _ \/ _\` |/ _\` |
 |_|  |_| \_,_||_| \__||_|      \___/ | .__/|_|\___/\__,_|\__,_|
                                      |_|                       \033[0m"

# Get a list of the serial devices
array=($(ls -d $SERIAL));

# Echo the header info
echo ""
echo -e "------------------------- Multi-Upload --------------------------"
echo -e "\033[0mBoard:      (-b):  \033[0;32m" $CORE
echo -e "\033[0mBoard:      (-b):  \033[0;32m" $BOARD
echo -e "\033[0mProject:    (-p):  \033[0;32m" $PROJECT
echo -e "\033[0mIDE Loc:    (-i):  \033[0;32m" $IDE_PATH
echo -e "\033[0mDevices:    (-d):   \033[0;35m→\033[0m" ${array[0]}

# Add the remaining serial devices to the header
for i in "${array[@]:1}"
do
   echo -e '                    \033[0;35m→\033[0m' $i
done
echo -e "\033[0mSequential: (-s):  \033[0;32m" $SEQUENTIAL
echo -e "\033[0mRetry:      (-r):  \033[0;32m" $RETRY
echo -e "\033[0mCache:      (-c):  \033[0;32m" $CACHE
echo -e "\033[0mUse CLI:    (-l):  \033[0;32m" $USE_CLI
echo ""

if [ "$USE_CLI" = true ]; then
    echo -e "\033[0;92mArduino-Cli Init"
    echo -e -n "\033[0m| \033[0;91m"
    arduino-cli core update-index 2>&1 | awk '$0="\033[0m|\033[0;91m "$0'
    #echo -e "\033[0m"

    # echo arduino-cli core list --config-file "$CONFIG"| grep "$CORE"

    if [ "$CORE"="adafruit:samd" ]; then
        if [ -z "`arduino-cli core list | grep "arduino:samd"`" ]; then
            echo -e "\033[0;92mIncluding 'arduino:samd'..."
            arduino-cli core install "arduino:avr" --config-file "$CONFIG" 2>&1 | awk '$0="\033[0m|\033[0;91m "$0'
            arduino-cli core install "arduino:samd" --config-file "$CONFIG" 2>&1 | awk '$0="\033[0m|\033[0;91m "$0'
        fi
    fi

    if [ -z "`arduino-cli core list | grep "$CORE"`" ]; then
        arduino-cli core install "$CORE" --config-file "$CONFIG" 2>&1 | awk '$0="\033[0m|\033[0;91m "$0'
        if [ $? -ne 0 ]; then
            echo ""
            echo -e "\033[0;33mError installing core \033[0;91m'$CORE'\033[0;33m (-b)."
            echo -e "Ensure the board manager url exists in '$CONFIG', or add via '-j'"
            echo -e "(\033[4;33mhttps://github.com/arduino/arduino-cli#adding-3rd-party-cores\033[0;33m)"
            exit 1
        fi
    fi
    echo -e "\033[0;92mArduino-Cli Init Done"
    # Turns out compiling slows the whole thing dowm more than it helps
    echo -e "\033[0;92mCompiling project...\033[0m"
    arduino-cli compile --fqbn "$BOARD" "$PROJECT" 2>&1 | awk '$0="\033[0m|\033[0;91m "$0'
    if [ ${PIPESTATUS[0]} -ne 0 ]; then
        echo -e "\033[0m→ \033[1;91mFAILED - Errors exist\033[0m"
        exit 1
    else
        BUILD_RES="$PROJECT"
        IFS='/' read -ra A_PATH <<< "${PROJECT%/}"
        PROJECT_NAME="${A_PATH[${#A_PATH[@]}-1]}"
        BOARD_DOT=$(echo "$BOARD" | tr ":" ".")
        printf -v BUILD_RES '%s/%s.%s.bin' "${PROJECT%/}" "$PROJECT_NAME" "$BOARD_DOT"
        echo -e "\033[0m→ \033[0;92mSUCCESS\033[0m"
    fi
fi

if [ ${#array[@]} -eq 0 ]; then
    echo "No devices meeting criteria, exit!"
    exit 0
fi

# Init some variables
log_files=()
pids=()
port=()
exit_codes=()
counter=0

if [ "$SEQUENTIAL" = false ]; then
    echo -e -n "\033[0mUploading to boards...\033[0m"
else
    echo -e "\033[0;92mUpload Trace:\033[0m"
    echo ""
    echo ""
fi
# Loop through the serial devices
for i in "${array[@]}"
do 
    if [ "$SEQUENTIAL" = true ]; then
        # Run an upload and set to background process with log file
        echo -e "+---------------------------- Upload -----------------------------"
        echo -e "| Port:     \033[1;36m" $i "\033[0m"
        echo -e "\033[0m| \033[0;91m"
        counter=$(($counter + 1))
        upload_nofile "$BOARD" "$i" "$PROJECT" 2>&1 | awk '$0="\033[0m|\033[0;91m "$0'
        if [ ${PIPESTATUS[0]} -ne 0 ]; then
            if [ "$RETRY" = true ]; then
                echo -e "\033[0m|"
                echo -e "\033[0m| Result:    \033[1;91mUPLOAD FAILED\033[0m → Retrying"
                echo -e "\033[0m|"
                upload_nofile "$BOARD" "$i" "$PROJECT" 2>&1 | awk '$0="\033[0m|\033[0;91m "$0'
                if [ ${PIPESTATUS[0]} -ne 0 ]; then
                    echo -e "\033[0m|"
                    echo -e "\033[0m| Result:    \033[1;91mUPLOAD FAILED\033[0m"
                    fails=$(($fails + 1))
                else
                    echo -e "\033[0m|"
                    echo -e "\033[0m| Result:    \033[1;92mSUCCESS\033[0m"
                    successes=$(($successes + 1))
                fi
            else
                echo -e "\033[0m|"
                echo -e "\033[0m| Result:    \033[1;91mUPLOAD FAILED\033[0m"
                fails=$(($fails + 1))
            fi
        else
            echo -e "\033[0m|"
            echo -e "\033[0m| Result:    \033[1;92mSUCCESS\033[0m"
            successes=$(($successes + 1))
        fi
        echo -e "\033[0m+-----------------------------------------------------------------"
        echo ""
    else
        # Run an upload and set to background process with log file
        upload "$BOARD" "$PROJECT" "$i" "$counter" true 1> /dev/null &
    fi
    # Append the log file to an array
    log_files+=("/tmp/multi-upload-out-$counter")
    # Increase the counter
    counter=$(($counter + 1))
    # Record the background process PID
    pids+=($!)
    port+=($i)
done

if [ "$SEQUENTIAL" = false ]; then
    # Loop through the PIDs and wait for each
    for i in "${pids[@]}"
    do 
        wait "$i"
        exit_codes+=($?)
    done
    # Announce that the processes are done
    echo -e "\033[0;92mAll processes done!\033[0m"
    echo ""
    echo ""
fi

if [ "$SEQUENTIAL" = false ]; then
    # Loop through each log file and print
    counter=0
    successes=0
    fails=0
    for i in "${log_files[@]}"
    do 
        echo -e "+---------------------------- Upload -----------------------------"
        echo -e "| Port:     \033[1;36m" ${port[$counter]} "\033[0m"
        if [ ${exit_codes[$counter]} -ne 0 ]; then
            echo -e "| Result:    \033[1;91mUPLOAD FAILED\033[0m"
            echo -e "| Log File: " $i ":"
            echo "|"
            awk '$0="\033[0m|\033[0;91m "$0' $i > "/tmp/multi-uploadt-print"
            cat "/tmp/multi-uploadt-print"
            echo -e "\033[0m|"
            fails=$(($fails + 1))
        else
            echo -e "| Result:    \033[1;92mSUCCESS\033[0m"
            successes=$(($successes + 1))
        fi
        echo -e "\033[0m+-----------------------------------------------------------------"
        echo ""
        counter=$(($counter + 1))
    done
fi

echo -e "→ \033[0;92m$successes\033[0m Pass, \033[0;91m$fails\033[0m Fail"
echo ""
echo "Done"

rm -rf "$build_path"